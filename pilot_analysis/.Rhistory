ggplot(data_old, aes(x = location_err_rad, fill = type ))+
geom_bar(aes(type, location_err_rad, fill = type),
position="dodge",stat="summary", fun.y="mean", SE=T)+
geom_errorbar(aes(y = location_error,x = type, ymin = location_error - se,
ymax = location_error + se),
color = "black", width = 0.10, data=dat_summary)+
theme_classic()
dat_summary<- summarySEwithin(data_old,
measurevar = "location_err_rad",
withinvars = c("type"),
idvar = "participant")
ggplot(data_old, aes(x = location_err_rad, fill = type ))+
geom_bar(aes(type, location_err_rad, fill = type),
position="dodge",stat="summary", fun.y="mean", SE=T)+
geom_errorbar(aes(y = location_error,x = type, ymin = location_error - se,
ymax = location_error + se),
color = "black", width = 0.10, data=dat_summary)+
theme_classic()
ggplot(data_old, aes(x = location_err_rad, fill = type ))+
geom_bar(aes(type, location_err_rad, fill = type),
position="dodge",stat="summary", fun.y="mean", SE=T)+
geom_errorbar(aes(y = location_err_rad,x = type, ymin = location_error - se,
ymax = location_error + se),
color = "black", width = 0.10, data=dat_summary)+
theme_classic()
ggplot(data_old, aes(x = location_err_rad, fill = type ))+
geom_bar(aes(type, location_err_rad, fill = type),
position="dodge",stat="summary", fun.y="mean", SE=T)+
geom_errorbar(aes(y = location_err_rad,x = type, ymin = location_err_rad - se,
ymax = location_err_rad + se),
color = "black", width = 0.10, data=dat_summary)+
theme_classic()
quantile(rand_all$location_err_rad, probs = seq(0.95))
thres<-qvonmises(0.95, mean_circ, kappa)
thres<-qvonmises(0.05, mean_circ, kappa)
thres<-qvonmises(0.95, mean_circ, kappa)
thres<-qvonmises(0.05, mean_circ, kappa)
# in the empirical,
data_old$location_err_rad<-data_old$location_error* 3.14/180
data_old$null_emp<-"empirical"
# get the mean
mean_circ<-circ.mean(rand_all$location_err_rad)
kappa<-est.kappa(rand_all$location_err_rad)
thres<-qvonmises(0.05, mean_circ, kappa)
thres<-qvonmises(0.05, mean_circ, kappa, from=0)
thres<-qvonmises(0.05, mean_circ, kappa, from=0)
PlotBind<-ggplot(data_null_emp, aes(x= location_err_rad, fill=null_emp))
PlotBind+
#geom_histogram(aes(y = ..density..),
#            colour = c(1,2), fill = "white") +
geom_density(alpha = .5)+
theme_classic()+
#geom_boxplot()+
geom_vline(xintercept = thres)+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20)
)+
xlab("location error in radians")+
#theme(legend.position = "none")+
ggtitle("Null vs empirical")+
theme(plot.title = element_text(hjust = 0.5))
?ks.test
# kolmogorov-smirnov Test
ks.test(data_null_emp$location_err_rad[data_null_emp=="empirical",],
data_null_emp$location_err_rad[data_null_emp=="null",], altenative = "less")
# kolmogorov-smirnov Test
ks.test(data_null_emp$location_err_rad[data_null_emp=="empirical"],
data_null_emp$location_err_rad[data_null_emp=="null"], altenative = "less")
View(rand_all)
data_null_emp$location_err_rad[data_null_emp=="empirical"]
# kolmogorov-smirnov Test
ks.test(data_null_emp$location_err_rad[data_null_emp=="emp"],
data_null_emp$location_err_rad[data_null_emp=="null"], altenative = "less")
data_null_emp$location_err_rad[data_null_emp=="emp"]
# kolmogorov-smirnov Test
ks.test(data_null_emp$location_err_rad[data_null_emp$null_emp=="emp"],
data_null_emp$location_err_rad[data_null_emp$null_emp=="null"], altenative = "less")
data_null_emp$null_emp
unique(data_null_emp$null_emp)
# kolmogorov-smirnov Test
ks.test(data_null_emp$location_err_rad[data_null_emp$null_emp=="empirical"],
data_null_emp$location_err_rad[data_null_emp$null_emp=="null"], altenative = "less")
PlotBind+
#geom_histogram(aes(y = ..density..),
#            colour = c(1,2), fill = "white") +
geom_density(alpha = .5)+
theme_classic()+
#geom_boxplot()+
geom_vline(xintercept = thres)+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20)
)+
xlab("location error in radians")+
#theme(legend.position = "none")+
ggtitle("Null vs empirical")+
facet_wrap(.~participant)
geom_vline(xintercept = thres)+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20)
)+
xlab("location error in radians")+
#theme(legend.position = "none")+
ggtitle("Null vs empirical")+
theme(plot.title = element_text(hjust = 0.5))
PlotBind+
#geom_histogram(aes(y = ..density..),
#            colour = c(1,2), fill = "white") +
geom_density(alpha = .5)+
theme_classic()+
#geom_boxplot()+
facet_wrap(.~participant)+
geom_vline(xintercept = thres)+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20)
)+
xlab("location error in radians")+
#theme(legend.position = "none")+
ggtitle("Null vs empirical")+
theme(plot.title = element_text(hjust = 0.5))
ks.test(data_null_emp$location_err_rad[data_null_emp$null_emp=="empirical"],
data_null_emp$location_err_rad[data_null_emp$null_emp=="null"], altenative = "less")
?cramer
library(cramer)
install.packages(cramer)
install.packages("cramer")
library(cramer)
?cramer
cramer.test(data_null_emp$location_err_rad[data_null_emp$null_emp=="empirical"],
data_null_emp$location_err_rad[data_null_emp$null_emp=="null"])
cramer.test(data_null_emp$location_err_rad[data_null_emp$null_emp=="empirical"],
data_null_emp$location_err_rad[data_null_emp$null_emp=="null"], replicates=100)
if(Sys.info()["sysname"]=="Linux"){
abs<-"/home/francesco/PowerFolders/PE_continuous_rolling/pilot_data/"
output<-"/home/francesco/PowerFolders/PE_continuous_rolling/pilot_analysis/"
} else{
abs<-"/Users/francescopupillo/PowerFolders/PE_continuous_rolling/pilot_data/"
output<-"/Users/francescopupillo/PowerFolders/PE_continuous_rolling/pilot_analysis/"
}
# check out many subs
subs<-list.files(abs, pattern="sub")
# delete the sub_000
subs<-subs[subs!="sub_000"]
data_all<-vector()
for(sub in subs){
file_location<-(paste0(abs, sub, "/beh/"))
data_recog<-read.csv(paste0(file_location,
list.files(file_location, pattern = "recognition")))
# remove the duplicates
images<-unique(data_recog$stimulus)
# remove empty values
images<-images[nchar(images)>1]
# create two datasets, one for recognition (first occurrence), one for location
# (second occurrence)
recog<-list()
#locat<-list()
for (im in 1:length(images)){
# subset the image
curr_im<-data_recog[data_recog$stimulus==images[im],]
max<-nrow(curr_im)
recog[[im]]<-curr_im[1,]
# locat[[im]]<-curr_im[max,]
}
data_rec<-do.call(rbind, recog)
#data_loc<-do.call(rbind, locat)
# create accuracy
# first, retrieve the keys for old and new
sub_n<-as.numeric(substr(sub, 5,7))
if (sub_n%%2==0){
old_response<-"left"
}else{
old_response<-"right"
}
data_rec$recog_acc<-ifelse(data_rec$old_new=="old" &
data_rec$recog_resp.keys==old_response, 1, 0)
# save it
write.csv(data_rec, paste0(output,"beh/", sub, "_recognition_cleaned.csv"))
data_all<-rbind(data_all, data_rec)
}
file_location<-(paste0(abs, sub, "/beh/"))
data_recog<-read.csv(paste0(file_location,
list.files(file_location, pattern = "recognition")))
file_location
list.files(file_location, pattern = "recognition")
if(Sys.info()["sysname"]=="Linux"){
abs<-"/home/francesco/PowerFolders/PE_continuous_rolling/pilot_data/"
output<-"/home/francesco/PowerFolders/PE_continuous_rolling/pilot_analysis/"
} else{
abs<-"/Users/francescopupillo/PowerFolders/PE_continuous_rolling/pilot_data/"
output<-"/Users/francescopupillo/PowerFolders/PE_continuous_rolling/pilot_analysis/"
}
# check out many subs
subs<-list.files(abs, pattern="sub")
# delete the sub_000
subs<-subs[subs!="sub_000"]
data_all<-vector()
for(sub in subs){
file_location<-(paste0(abs, sub, "/beh/"))
data_recog<-read.csv(paste0(file_location,
list.files(file_location, pattern = "recognition")))
# remove the duplicates
images<-unique(data_recog$stimulus)
# remove empty values
images<-images[nchar(images)>1]
# create two datasets, one for recognition (first occurrence), one for location
# (second occurrence)
recog<-list()
#locat<-list()
for (im in 1:length(images)){
# subset the image
curr_im<-data_recog[data_recog$stimulus==images[im],]
max<-nrow(curr_im)
recog[[im]]<-curr_im[1,]
# locat[[im]]<-curr_im[max,]
}
data_rec<-do.call(rbind, recog)
#data_loc<-do.call(rbind, locat)
# create accuracy
# first, retrieve the keys for old and new
sub_n<-as.numeric(substr(sub, 5,7))
if (sub_n%%2==0){
old_response<-"left"
}else{
old_response<-"right"
}
data_rec$recog_acc<-ifelse(data_rec$old_new=="old" &
data_rec$recog_resp.keys==old_response, 1, 0)
# save it
write.csv(data_rec, paste0(output,"beh/", sub, "_recognition_cleaned.csv"))
data_all<-rbind(data_all, data_rec)
}
cramer.test(data_null_emp$location_err_rad[data_null_emp$null_emp=="empirical"],
data_null_emp$location_err_rad[data_null_emp$null_emp=="null"], replicates=100)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(CircStats)
if(Sys.info()["sysname"]=="Linux"){
abs<-"/home/francesco/PowerFolders/PE_continuous_rolling/pilot_data/"
output<-"/home/francesco/PowerFolders/PE_continuous_rolling/pilot_analysis/"
} else{
abs<-"/Users/francescopupillo/PowerFolders/PE_continuous_rolling/pilot_data/"
output<-"/Users/francescopupillo/PowerFolders/PE_continuous_rolling/pilot_analysis/"
}
# check out many subs
subs<-list.files(abs, pattern="sub")
# delete the sub_000
subs<-subs[subs!="sub_000"]
data_all<-vector()
for(sub in subs){
file_location<-(paste0(abs, sub, "/beh/"))
data_recog<-read.csv(paste0(file_location,
list.files(file_location, pattern = "recognition")))
# remove the duplicates
images<-unique(data_recog$stimulus)
# remove empty values
images<-images[nchar(images)>1]
# create two datasets, one for recognition (first occurrence), one for location
# (second occurrence)
recog<-list()
#locat<-list()
for (im in 1:length(images)){
# subset the image
curr_im<-data_recog[data_recog$stimulus==images[im],]
max<-nrow(curr_im)
recog[[im]]<-curr_im[1,]
# locat[[im]]<-curr_im[max,]
}
data_rec<-do.call(rbind, recog)
#data_loc<-do.call(rbind, locat)
# create accuracy
# first, retrieve the keys for old and new
sub_n<-as.numeric(substr(sub, 5,7))
if (sub_n%%2==0){
old_response<-"left"
}else{
old_response<-"right"
}
data_rec$recog_acc<-ifelse(data_rec$old_new=="old" &
data_rec$recog_resp.keys==old_response, 1, 0)
# save it
write.csv(data_rec, paste0(output,"beh/", sub, "_recognition_cleaned.csv"))
data_all<-rbind(data_all, data_rec)
}
# create recognition accuracy
hit_rate<-data_all %>%
filter(old_new=="old")%>%
group_by(participant) %>%
summarize(hit_rate=mean(recog_acc))
hit_rate
# hit rate by group
hit_rate_type<-data_all %>%
filter(old_new=="old")%>%
group_by(participant, type)%>%
summarize(hit_rate=mean(recog_acc))
hit_rate_type
# plot
data_old<-data_all %>%
filter(old_new=="old")
ggplot(data_old,
aes(type, recog_acc))+
geom_point(aes(group = participant, color = type),
cex = 3.25,
position = position_dodge(0.1),
show.legend = FALSE,
stat="summary")+
#geom_boxplot(alpha = 0)+
geom_line(data = data_old, aes(type, recog_acc,group = participant),
size=1, alpha=0.2, stat="summary")+
theme_classic() +
#scale_color_manual( values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred")) +
theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
theme(axis.ticks.x = element_blank())+
theme(strip.text.x = element_text(size = 13))+
ylab("hit rate")+
#scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
theme(axis.text.x = element_text( size = 20))+
theme(axis.title=element_text(size=14,face="bold"))+
theme(legend.position = "none")
# prediction error at encoding and probability of remembering
data_old$PE<-as.numeric(data_old$PE)
ggplot(data_old, aes(PE, recog_acc))+
geom_line(stat="smooth",method="lm",  formula=y~x,method.args=list(family="binomial"), alpha=0.5)+
aes(colour = factor(participant),   alpha=0.3)+
geom_smooth(method="lm",formula=y~x,method.args=list(family="binomial"), colour="black", se=T)+
#facet_grid(.~accuracy)+
theme(strip.text.x = element_text(size = 13))+
theme_classic()+
theme(legend.position = "none")+
xlab("PE (in degrees)")
# calculate angular difference between location at encoding and participant's
# response
# now calculate PE
data_old$location_error<-NA
for (j in 1:nrow(data_rec)){
# location presented in degrees
presented<-as.numeric(data_old$degrees[j])
# response
response<-data_old$response[j]
#radCent<-center*3.14/180
firstdiff<- abs(presented-response)
max_deg<-max(presented,response)
min_deg<-min(presented, response)
seconddiff<-abs(min_deg +(360-max_deg))
data_old$location_error[j]<-min((firstdiff), (seconddiff))
}
# create null distribution
rand_all<-NA
for ( n in 1:500){
# get the number of the files
df<-data_old[data_old$participant==unique(data_old$participant)[1],]
num_df<-nrow(df)
# generate random response from 1 to 180 degrees
rand<-runif(num_df, min = 1, max = 359)
df$rand<-rand
# generate the location error
df$location_error<-NA
for (j in 1:nrow(df)){
# location presented in degrees
presented<-as.numeric(df$degrees[j])
# response
response<-df$rand[j]
#radCent<-center*3.14/180
firstdiff<- abs(presented-response)
max_deg<-max(presented,response)
min_deg<-min(presented, response)
seconddiff<-abs(min_deg +(360-max_deg))
df$location_error[j]<-min((firstdiff), (seconddiff))
}
rand_all<-rbind(rand_all, df)
}
hist(rand_all$location_error)
library(circular)
# convert location error in radians
rand_all$location_err_rad<-rand_all$location_error* 3.14/180
hist(rand_all$location_err_rad)
rand_all$null_emp<-"null"
rand_all<-rand_all[!is.na(rand_all$location_err_rad),]
# get the mean
mean_circ<-circ.mean(rand_all$location_err_rad)
kappa<-est.kappa(rand_all$location_err_rad)
thres<-qvonmises(0.05, mean_circ, kappa, from=0)
# in the empirical,
data_old$location_err_rad<-data_old$location_error* 3.14/180
data_old$null_emp<-"empirical"
select_names<-names(data_old)
rand_all<-rand_all[, select_names]
# merge
data_null_emp<-rbind(rand_all, data_old)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(CircStats)
if(Sys.info()["sysname"]=="Linux"){
abs<-"/home/francesco/PowerFolders/PE_continuous_rolling/pilot_data/"
output<-"/home/francesco/PowerFolders/PE_continuous_rolling/pilot_analysis/"
} else{
abs<-"/Users/francescopupillo/PowerFolders/PE_continuous_rolling/pilot_data/"
output<-"/Users/francescopupillo/PowerFolders/PE_continuous_rolling/pilot_analysis/"
}
sub<psubs[1]
sub<-subs[1]
# check out many subs
subs<-list.files(abs, pattern="sub")
# delete the sub_000
subs<-subs[subs!="sub_000"]
sub<-subs[1]
dominant_eye<-"right"
file_location<-(paste0(abs, sub, "/beh/"))
et_location<-(paste0(abs, sub, "/et/"))
data_recog<-read.csv(paste0(file_location,
list.files(file_location, pattern = "recognition")))
data_encoding<-read.csv(paste0(file_location,
list.files(file_location, pattern = "test")))
# get only the trials
data_encoding<-data_encoding[!is.na(data_encoding$radians),]
sub_n<-as.numeric(substr(sub, 5,7))
data_et<-read.csv(paste0(et_location, "sub-",  sub_n, "_eye-", dominant_eye,
"_last-fixation_et.csv"))
# attach to the encoding dataset
data_encoding_et<-cbind(data_encoding, data_et)
new_y<-ifelse(data_encoding_et$y<=540, (540-data_encoding_et$y), -(data_encoding_et$y-540 ))
new_x<-ifelse(data_encoding_et$x<=960, -(960-data_encoding_et$x), (data_encoding_et$x-960))
# get the quadrant
quadrant<-NA
tanx<-NA
3.14/2
n<-1
(new_x[n]>0 & new_y[n]>0)
(new_y)/(new_x)
tanx[n]<-(new_y[n])/(new_x[n])
tanx[n]
x[n]<-atan(tan[n])
x[n]<-atan(tanx[n])
x<-NA
x[n]<-atan(tanx[n])
x[n]
x_rad<-NA
x_deg<-NA
x_rad[n]<-atan(tanx[n])
x_deg[n]<-x_rad[n]*180/pi
n<-2
(new_y[n]>0 & new_x[n]<0)
(new_x[n]>0 & new_y[n]>0)
(new_y[n]>0 & new_x[n]<0)
(new_y[n]<0 & new_x[n]<0)
tanx[n]<-(new_y[n])/(new_x[n])
tanx[n]<-(new_y[n])/(new_x[n])
x_rad[n]<-atan(tanx[n])
x_deg[n]<-x_rad[n]*180/pi
x_deg[n]<-x_rad[n]*180/pi+180
n<-3
# get the quadrant
quadrant<-NA
tanx<-NA
x_rad<-NA
x_deg<-NA
(new_x[n]>0 & new_y[n]>0)
quadrant[n]<-1
tanx[n]<-(new_y[n])/(new_x[n])
x_rad[n]<-atan(tanx[n])
x_deg[n]<-x_rad[n]*180/pi
x<-4
(new_x[n]>0 & new_y[n]>0)
quadrant[n]<-1
tanx[n]<-(new_y[n])/(new_x[n])
x_rad[n]<-atan(tanx[n])
x_deg[n]<-x_rad[n]*180/pi
x<-5
(new_x[n]>0 & new_y[n]>0)
quadrant[n]<-1
tanx[n]<-(new_y[n])/(new_x[n])
x_rad[n]<-atan(tanx[n])
x_deg[n]<-x_rad[n]*180/pi
x<-6
(new_x[n]>0 & new_y[n]>0)
x<-7
(new_x[n]>0 & new_y[n]>0)
x<-8
(new_x[n]>0 & new_y[n]>0)
x<-9
(new_x[n]>0 & new_y[n]>0)
new_x
x<-11
(new_x[n]>0 & new_y[n]>0)
b\new_y
new_y
new_x
n<-11
(new_x[n]>0 & new_y[n]>0)
(new_y[n]>0 & new_x[n]<0)
tanx[n]<-(new_y[n])/(new_x[n])
x_rad[n]<-atan(tanx[n])
x_deg[n]<-x_rad[n]*180/pi
x_deg[n]
(new_y[n])/(new_x[n])
tanx[n]
x_rad[n]
atan(tanx[n])
x_rad[n]*180/pi
(new_y[n]>0 & new_x[n]<0)
